import jsPDF from 'jspdf';

// Company information (matching the invoice format)
const COMPANY_INFO = {
  name: 'LIMOSTAR',
  tagline: 'Just luxury cars',
  address: '65, Avenue Louise, 1050 Brussels, Belgium',
  vat: 'BE0888881670',
  iban: 'BE94363014508614',
  bic: 'BBRUBEBB',
  phone: '+3225120101',
  email: 'info@limostar.be',
  website: 'www.limostar.be'
};

// Legal terms (matching the invoice format)
const LEGAL_TERMS = [
  'All invoices are payable cash on delivery.',
  'Amounts due must be transferred in Euro to Limostar scs bank account, mentioning the invoice number.',
  'In case of late payment, sums due will be increased by right and without prior notice, with a late interest corresponding to the legal rate. Additionally, a fixed indemnity equal to 15% of the invoice amount, with a minimum of 100€, will be due for administrative costs generated by this late payment.',
  'Any dispute regarding the invoice must be sent by registered mail to Limostar scs, Avenue LOUISE 65 BE-1050 Bruxelles, within 8 days following the dispatch of said document, failing which the dispute cannot be taken into consideration. The postmark will be proof.',
  'In case of persistent dispute, the courts of Brussels are competent.'
];

export function generateInvoicePDF(invoiceData) {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  const margin = 20;
  let yPosition = margin;

  // Enhanced helper function to add text with better formatting
  const addText = (text, x, y, options = {}) => {
    const { 
      fontSize = 10, 
      fontStyle = 'normal', 
      color = [0, 0, 0], 
      maxWidth = pageWidth - margin * 2,
      align = 'left'
    } = options;
    
    doc.setFontSize(fontSize);
    doc.setFont('helvetica', fontStyle);
    doc.setTextColor(color[0], color[1], color[2]);
    
    const lines = doc.splitTextToSize(text, maxWidth);
    doc.text(lines, x, y, { align });
    return y + (lines.length * fontSize * 0.4);
  };

  // Enhanced helper function to draw line with style options
  const drawLine = (x1, y1, x2, y2, options = {}) => {
    const { color = [0, 0, 0], width = 0.5 } = options;
    doc.setDrawColor(color[0], color[1], color[2]);
    doc.setLineWidth(width);
    doc.line(x1, y1, x2, y2);
    doc.setLineWidth(0.5); // Reset to default
  };

  // Enhanced helper function to add rectangle with better styling
  const addRect = (x, y, width, height, options = {}) => {
    const { fill = false, fillColor = [240, 240, 240], stroke = true, strokeColor = [0, 0, 0] } = options;
    
    if (fill) {
      doc.setFillColor(fillColor[0], fillColor[1], fillColor[2]);
    }
    if (stroke) {
      doc.setDrawColor(strokeColor[0], strokeColor[1], strokeColor[2]);
    }
    
    const style = fill ? (stroke ? 'FD' : 'F') : (stroke ? 'D' : '');
    doc.rect(x, y, width, height, style);
  };

  // Helper function to add centered text
  const addCenteredText = (text, y, options = {}) => {
    const { fontSize = 10, fontStyle = 'normal', color = [0, 0, 0] } = options;
    return addText(text, pageWidth / 2, y, { 
      ...options, 
      align: 'center',
      maxWidth: pageWidth 
    });
  };

  // Helper function to add right-aligned text
  const addRightText = (text, y, options = {}) => {
    const { fontSize = 10, fontStyle = 'normal', color = [0, 0, 0], rightMargin = margin } = options;
    return addText(text, pageWidth - rightMargin, y, { 
      ...options, 
      align: 'right',
      maxWidth: pageWidth 
    });
  };

  // ===== HEADER SECTION =====
  // Top border line
  drawLine(margin, yPosition - 5, pageWidth - margin, yPosition - 5, { width: 1 });
  
  // Company logo and name (left side) - Enhanced styling
  const headerY = yPosition + 5;
  doc.setFontSize(28);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(30, 30, 30);
  doc.text(COMPANY_INFO.name, margin, headerY);
  
  // Crown symbol with better positioning
  doc.setFontSize(20);
  doc.setTextColor(255, 215, 0); // Gold color
  doc.text('♔', margin + 65, headerY - 2);
  
  // Tagline with better styling
  doc.setFontSize(13);
  doc.setFont('helvetica', 'italic');
  doc.setTextColor(100, 100, 100);
  yPosition = addText(COMPANY_INFO.tagline, margin, headerY + 8, { fontSize: 13 });

  // Invoice details box (right side) - Enhanced design
  const invoiceBoxWidth = 90;
  const invoiceBoxX = pageWidth - margin - invoiceBoxWidth;
  const invoiceBoxHeight = 45;
  
  // Enhanced invoice box with better styling
  addRect(invoiceBoxX, headerY - 5, invoiceBoxWidth, invoiceBoxHeight, { 
    fill: true, 
    fillColor: [248, 249, 250],
    strokeColor: [200, 200, 200]
  });
  
  // Invoice number with better typography
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(50, 50, 50);
  doc.text('DEVIS N°:', invoiceBoxX + 8, headerY + 5);
  
  doc.setFontSize(14);
  doc.setTextColor(0, 100, 200);
  doc.text(invoiceData.invoiceNumber, invoiceBoxX + 8, headerY + 12);
  
  // Invoice details table with better formatting
  const details = [
    ['PAGE', '1'],
    ['DATE', invoiceData.date],
    ['CLIENT', invoiceData.clientCode || 'CL0001']
  ];
  
  let detailY = headerY + 18;
  details.forEach(([label, value]) => {
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(80, 80, 80);
    doc.text(`${label}:`, invoiceBoxX + 8, detailY);
    doc.text(value, invoiceBoxX + 35, detailY);
    detailY += 5;
  });

  yPosition = Math.max(yPosition, headerY + invoiceBoxHeight + 10);

  // ===== COMPANY & CLIENT INFORMATION SECTION =====
  yPosition += 15;
  
  // Section separator line
  drawLine(margin, yPosition - 5, pageWidth - margin, yPosition - 5, { color: [200, 200, 200] });
  
  // Company information (left) - Enhanced layout
  const companySectionY = yPosition + 5;
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(40, 40, 40);
  doc.text('FACTURÉ PAR:', margin, companySectionY);
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(0, 0, 0);
  doc.text(COMPANY_INFO.name, margin, companySectionY + 8);
  
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(60, 60, 60);
  let companyY = addText(COMPANY_INFO.address, margin, companySectionY + 16, { fontSize: 10 });
  companyY = addText(`TVA: ${COMPANY_INFO.vat}`, margin, companyY + 4, { fontSize: 10 });
  companyY = addText(`IBAN: ${COMPANY_INFO.iban}`, margin, companyY + 4, { fontSize: 10 });
  companyY = addText(`BIC: ${COMPANY_INFO.bic}`, margin, companyY + 4, { fontSize: 10 });

  // Client information (right) - Enhanced layout
  const clientX = pageWidth / 2 + 20;
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(40, 40, 40);
  doc.text('FACTURÉ À:', clientX, companySectionY);
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(0, 0, 0);
  doc.text(invoiceData.clientName, clientX, companySectionY + 8);
  
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(60, 60, 60);
  let clientY = addText(invoiceData.clientAddress, clientX, companySectionY + 16, { fontSize: 10 });
  if (invoiceData.clientPostalCode && invoiceData.clientCity) {
    clientY = addText(`${invoiceData.clientPostalCode} ${invoiceData.clientCity}`, clientX, clientY + 4, { fontSize: 10 });
  }

  yPosition = Math.max(companyY, clientY) + 15;

  // ===== PAYMENT INFORMATION SECTION =====
  yPosition += 10;
  
  // Payment information box
  const paymentBoxWidth = pageWidth - margin * 2;
  const paymentBoxHeight = 25;
  
  addRect(margin, yPosition, paymentBoxWidth, paymentBoxHeight, { 
    fill: true, 
    fillColor: [250, 250, 250],
    strokeColor: [220, 220, 220]
  });
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(50, 50, 50);
  doc.text('MODE DE REGLEMENT:', margin + 10, yPosition + 8);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(0, 0, 0);
  doc.text(invoiceData.paymentMethod || 'Virement', margin + 70, yPosition + 8);
  
  doc.setFont('helvetica', 'bold');
  doc.text('DATE D\'ÉCHÉANCE:', margin + 10, yPosition + 18);
  doc.setFont('helvetica', 'normal');
  doc.text(invoiceData.dueDate || '', margin + 70, yPosition + 18);

  yPosition += paymentBoxHeight + 15;

  // ===== QUOTE DETAILS SECTION =====
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(50, 50, 50);
  doc.text('Détails du devis:', margin, yPosition + 5);
  
  yPosition += 15;

  // ===== SERVICES TABLE SECTION =====
  const tableY = yPosition;
  const colWidths = [120, 35, 35, 35];
  const colX = [margin, margin + colWidths[0], margin + colWidths[0] + colWidths[1], margin + colWidths[0] + colWidths[1] + colWidths[2]];
  const tableWidth = colWidths.reduce((a, b) => a + b, 0);
  const headerHeight = 20;
  
  // Enhanced table header with professional styling
  addRect(margin, tableY, tableWidth, headerHeight, { 
    fill: true, 
    fillColor: [230, 240, 255], // Light blue header like in your example
    strokeColor: [100, 150, 200]
  });
  
  // Header text with better typography and alignment
  doc.setFontSize(11);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(40, 80, 120);
  doc.text('DESCRIPTION', colX[0] + 10, tableY + 13);
  
  // Right-align the numeric columns
  doc.text('TOTAL HTVA', colX[1] + 5, tableY + 13, { align: 'right' });
  doc.text('TVA', colX[2] + 5, tableY + 13, { align: 'right' });
  doc.text('TOTAL TVAC', colX[3] + 5, tableY + 13, { align: 'right' });

  // Add column separators with better visibility
  drawLine(colX[1], tableY, colX[1], tableY + headerHeight, { color: [100, 150, 200], width: 0.8 });
  drawLine(colX[2], tableY, colX[2], tableY + headerHeight, { color: [100, 150, 200], width: 0.8 });
  drawLine(colX[3], tableY, colX[3], tableY + headerHeight, { color: [100, 150, 200], width: 0.8 });

  yPosition = tableY + headerHeight;

  // Services Table Content - Enhanced and Structured
  invoiceData.services.forEach((service, index) => {
    const rowHeight = 25;
    const serviceY = yPosition + (index * rowHeight);
    
    // Add subtle background for alternating rows
    if (index % 2 === 0) {
      addRect(margin, serviceY, tableWidth, rowHeight, { 
        fill: true, 
        fillColor: [248, 250, 252], // Very light background
        stroke: false
      });
    }
    
    // Service description with better formatting
    const descriptionLines = doc.splitTextToSize(service.description, colWidths[0] - 20);
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(50, 50, 50);
    doc.text(descriptionLines, colX[0] + 10, serviceY + 12);
    
    // Price information with right alignment
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(0, 0, 0);
    
    // Right-align all numeric values
    doc.text(`€${service.priceExclVat.toFixed(2)}`, colX[1] + colWidths[1] - 5, serviceY + 12, { align: 'right' });
    doc.text(`€${service.vatAmount.toFixed(2)}`, colX[2] + colWidths[2] - 5, serviceY + 12, { align: 'right' });
    doc.text(`€${service.priceInclVat.toFixed(2)}`, colX[3] + colWidths[3] - 5, serviceY + 12, { align: 'right' });
    
    // Add column separators for each row
    drawLine(colX[1], serviceY, colX[1], serviceY + rowHeight, { color: [220, 220, 220], width: 0.5 });
    drawLine(colX[2], serviceY, colX[2], serviceY + rowHeight, { color: [220, 220, 220], width: 0.5 });
    drawLine(colX[3], serviceY, colX[3], serviceY + rowHeight, { color: [220, 220, 220], width: 0.5 });
    
    // Draw line under service
    drawLine(margin, serviceY + rowHeight, margin + tableWidth, serviceY + rowHeight, { color: [200, 200, 200], width: 0.5 });
  });

  // Add summary row at the bottom of the table
  const summaryY = yPosition + (invoiceData.services.length * 25);
  const summaryHeight = 20;
  
  // Summary row background
  addRect(margin, summaryY, tableWidth, summaryHeight, { 
    fill: true, 
    fillColor: [245, 248, 250],
    strokeColor: [180, 180, 180]
  });
  
  // Summary text
  doc.setFontSize(10);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(60, 60, 60);
  doc.text('TOTAL HTVA:', colX[1] + colWidths[1] - 5, summaryY + 12, { align: 'right' });
  doc.text('TVA:', colX[2] + colWidths[2] - 5, summaryY + 12, { align: 'right' });
  doc.text('TOTAL TVAC:', colX[3] + colWidths[3] - 5, summaryY + 12, { align: 'right' });
  
  // Summary values
  doc.setFontSize(10);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(0, 0, 0);
  doc.text(`€${invoiceData.totals.priceExclVat.toFixed(2)}`, colX[1] + colWidths[1] - 5, summaryY + 12, { align: 'right' });
  doc.text(`€${invoiceData.totals.vatAmount.toFixed(2)}`, colX[2] + colWidths[2] - 5, summaryY + 12, { align: 'right' });
  doc.text(`€${invoiceData.totals.priceInclVat.toFixed(2)}`, colX[3] + colWidths[3] - 5, summaryY + 12, { align: 'right' });
  
  // Add column separators for summary row
  drawLine(colX[1], summaryY, colX[1], summaryY + summaryHeight, { color: [180, 180, 180], width: 0.8 });
  drawLine(colX[2], summaryY, colX[2], summaryY + summaryHeight, { color: [180, 180, 180], width: 0.8 });
  drawLine(colX[3], summaryY, colX[3], summaryY + summaryHeight, { color: [180, 180, 180], width: 0.8 });
  
  // Bottom border of the entire table
  drawLine(margin, summaryY + summaryHeight, margin + tableWidth, summaryY + summaryHeight, { color: [100, 150, 200], width: 1 });

  yPosition = summaryY + summaryHeight + 20;

  // ===== REMARK SECTION =====
  const remarkY = yPosition;
  doc.setFontSize(10);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(60, 60, 60);
  doc.text('Remarque:', margin, remarkY + 8);
  
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(80, 80, 80);
  doc.text('www.locationautocar.be by Limostar', margin, remarkY + 18);

  yPosition = remarkY + 35;

  // ===== TOTALS SECTION =====
  const totalsY = yPosition;
  const totalsWidth = 90;
  const totalsX = pageWidth - margin - totalsWidth;
  
  // Summary table with enhanced styling
  addRect(totalsX, totalsY, totalsWidth, 50, { 
    fill: true, 
    fillColor: [248, 249, 250],
    strokeColor: [200, 200, 200]
  });
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(60, 60, 60);
  doc.text('HTVA:', totalsX + 8, totalsY + 12);
  addRightText(`€${invoiceData.totals.priceExclVat.toFixed(2)}`, totalsY + 12, { rightMargin: margin + 8, fontSize: 11 });
  
  doc.text('TVA:', totalsX + 8, totalsY + 22);
  addRightText(`€${invoiceData.totals.vatAmount.toFixed(2)}`, totalsY + 22, { rightMargin: margin + 8, fontSize: 11 });
  
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(0, 0, 0);
  doc.text('TOTAL TVAC:', totalsX + 8, totalsY + 35);
  addRightText(`€${invoiceData.totals.priceInclVat.toFixed(2)}`, totalsY + 35, { rightMargin: margin + 8, fontSize: 11 });
  
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(60, 60, 60);
  doc.text('ACOMPTE:', totalsX + 8, totalsY + 45);
  addRightText(`€${(invoiceData.totals.deposit || 0).toFixed(2)}`, totalsY + 45, { rightMargin: margin + 8, fontSize: 11 });

  // Amount due section with enhanced styling
  const dueY = totalsY + 55;
  addRect(totalsX, dueY, totalsWidth, 25, { 
    fill: true, 
    fillColor: [255, 255, 255],
    strokeColor: [180, 180, 180]
  });
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(0, 0, 0);
  doc.text('TOTAL TVAC:', totalsX + 8, dueY + 10);
  addRightText(`€${invoiceData.totals.priceInclVat.toFixed(2)}`, dueY + 10, { rightMargin: margin + 8, fontSize: 12 });
  
  const remainingY = dueY + 30;
  addRect(totalsX, remainingY, totalsWidth, 20, { 
    fill: true, 
    fillColor: [255, 248, 220],
    strokeColor: [200, 180, 100]
  });
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(150, 100, 0);
  doc.text('RESTE À PAYER:', totalsX + 8, remainingY + 12);
  addRightText(`€${(invoiceData.totals.priceInclVat - (invoiceData.totals.deposit || 0)).toFixed(2)}`, remainingY + 12, { rightMargin: margin + 8, fontSize: 11 });

  // ===== LEGAL TERMS SECTION =====
  yPosition = Math.max(yPosition + 20, remainingY + 35);
  
  // Legal terms header
  doc.setFontSize(10);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(50, 50, 50);
  doc.text('CONDITIONS DE PAIEMENT:', margin, yPosition);
  
  // Add underline
  const textWidth = doc.getTextWidth('CONDITIONS DE PAIEMENT:');
  drawLine(margin, yPosition + 2, margin + textWidth, yPosition + 2, { color: [150, 150, 150] });
  
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(60, 60, 60);
  yPosition += 12;
  
  LEGAL_TERMS.forEach((term, index) => {
    const termY = yPosition + (index * 18);
    doc.setFontSize(9);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(80, 80, 80);
    doc.text(`${index + 1}.`, margin, termY);
    
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(60, 60, 60);
    const termLines = doc.splitTextToSize(term, pageWidth - margin * 2 - 15);
    doc.text(termLines, margin + 12, termY);
    yPosition = termY + (termLines.length * 4);
  });

  // ===== FOOTER SECTION =====
  const footerY = pageHeight - 40;
  
  // Footer separator line
  drawLine(margin, footerY - 5, pageWidth - margin, footerY - 5, { color: [200, 200, 200] });
  
  // Footer content with better styling
  doc.setFontSize(9);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(40, 40, 40);
  doc.text(COMPANY_INFO.name, margin, footerY + 5);
  
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(80, 80, 80);
  doc.text(COMPANY_INFO.address, margin, footerY + 12);
  
  doc.setFontSize(8);
  doc.text(`TEL.: ${COMPANY_INFO.phone} - E-mail: ${COMPANY_INFO.email} - Site Web: ${COMPANY_INFO.website}`, margin, footerY + 20);

  return doc;
}

// Helper function to create invoice data from trip
export function createInvoiceFromTrip(trip, client, invoiceNumber) {
  const invoiceDate = new Date().toISOString().split('T')[0];
  const dueDate = new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]; // 3 days from now
  
  // Calculate VAT (6% for transportation services in Belgium)
  const vatRate = 6;
  const priceExclVat = trip.revenue || 0;
  const vatAmount = (priceExclVat * vatRate) / 100;
  const priceInclVat = priceExclVat + vatAmount;

  return {
    invoiceNumber: invoiceNumber,
    date: invoiceDate,
    dueDate: dueDate,
    clientCode: client?.id || 'CL0001',
    clientName: client?.company || trip.client || 'Client Name',
    clientAddress: client?.address || 'Client Address',
    clientPostalCode: client?.postalCode,
    clientCity: client?.city,
    paymentMethod: 'Virement',
    services: [
      {
        description: `${trip.pickup} → ${trip.destination} - ${trip.date} ${trip.time || ''} - ${trip.passengers} passengers${trip.notes ? ' - ' + trip.notes : ''}`,
        priceExclVat: priceExclVat,
        vatRate: vatRate,
        vatAmount: vatAmount,
        priceInclVat: priceInclVat
      }
    ],
    totals: {
      priceExclVat: priceExclVat,
      vatAmount: vatAmount,
      priceInclVat: priceInclVat,
      deposit: 0
    }
  };
}

// Helper function to generate and download invoice
export function downloadInvoice(invoiceData) {
  const doc = generateInvoicePDF(invoiceData);
  const fileName = `Facture_${invoiceData.invoiceNumber}_${invoiceData.date}.pdf`;
  doc.save(fileName);
}

// Helper function to generate invoice number
export function generateInvoiceNumber() {
  const now = new Date();
  const year = now.getFullYear().toString().slice(-2);
  const month = (now.getMonth() + 1).toString().padStart(2, '0');
  const day = now.getDate().toString().padStart(2, '0');
  const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
  return `FC${year}${month}${day}${random}`;
}
